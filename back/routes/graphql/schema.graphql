"A datetime string with format 'Y-m-d H:i:s', e.g. '2018-01-01 13:00:00'."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format 'Y-m-d', e.g. '2011-05-23'."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

#import user.graphql
#import post.graphql
#import media.graphql
#import category.graphql
#import tag.graphql
#import setting.graphql

type Login {
    access_token: String
    expires_at: String
}

type Query {
    users: [User!]! @paginate(type: "paginator" model: "User")
    user(id: ID @eq): User @find(model: "User")
    postsAll: [Post!]! @all
    settings: [Setting!]! @all
    post(id: Int! @eq): Post @find
    postBySlug(slug: String! @eq): Post @event(fire: "LaravelVueJs\\Events\\PostViewed")
    tagBySlug(slug: String! @eq): Tag
    categoryBySlug(slug: String!): Category
    posts (sort_by : String) : [Post!]! @paginate(builder: "LaravelVueJs\\Models\\Post@visiblePosts")
    featuredPosts (sort_by : String) : [Post!]! @paginate(builder: "LaravelVueJs\\Models\\Post@featuredPosts")
    postsByTag(slug: String!, sort_by : String): [Post!]! @paginate(builder: "LaravelVueJs\\Models\\Post@postsByTag")
    postsByCategory(slug: String!, sort_by : String): [Post!]! @paginate(builder: "LaravelVueJs\\Models\\Post@postsByCategory")
    login(email: String!, password: String!, remember_me : Boolean): Login
}

extend type Query @middleware(checks: ["auth:api"]) {
    me : User
    logout: String
}

type Mutation {
    signup(email: String! @rules(apply: ["email","unique:users"]), password: String! @rules(apply: ["min:6"]), name: String! ): User @event(fire: "Illuminate\\Auth\\Events\\Registered")
}
